#include <stdio.h>
#include <malloc.h>
#include <string.h>
#include "Serializer.h"
#include "Json.h"
#include "Global.h"
#include "Catalog.h"

// assume that all jsons have only one array of one degree
// assume that all arrays are string arrays

/*
int ArraySerializer(char * json, int start, int end, int * max_id, catalog_record ** CATALOG, FILE * file);
int ObjectSerializer(char * json, int start, int end, int * max_id, catalog_record ** CATALOG, FILE * file);
void write(head2 * Serializer, FILE * file);
*/

// for test

void formatWrite(head2 * Serializer, FILE * file) {
  /*
    static char IOBUFFER[PAGE_SIZE];

    // 8k buffer
    if (setvbuf(file, IOBUFFER, _IOFBF, PAGE_SIZE) != 0) {
    printf("failed to set up buffer for input file\n");
    } else {
    printf("buffer set up for input file\n"); 
    }
  */

  fprintf(file, "%d ", Serializer->tuple_id);
  //fwrite(&(Serializer->tuple_id), sizeof(int), 1, file);
  //printf("%d ", Serializer->tuple_id);
  fprintf(file, "%d ", Serializer->attr_num);
  //fwrite(&(Serializer->attr_num), sizeof(int), 1, file);
  //printf("%d ", Serializer->attr_num);
  
  int i;
  int len = Serializer->attr_num;
  for(i = 0; i < len; i++) {
    fprintf(file, "%d ", Serializer->data_unit_array[i].attr_id);
    //fwrite(&(Serializer->data_unit_array[i].attr_id), sizeof(int), 1, file);
    //printf("%d ", Serializer->data_unit_array[i].attr_id);
  }
  //printf("\n");
  fprintf(file, "\n%d ", Serializer->offset);
  //fwrite(&(Serializer->offset), sizeof(int), 1, file);
  //printf("%d ", Serializer->offset);
  for(i = 0; i < len; i++) {
    fprintf(file, "%d ", Serializer->data_unit_array[i].offset);
    //fwrite(&(Serializer->data_unit_array[i].offset), sizeof(int), 1, file);
    //printf("%d ", Serializer->data_unit_array[i].offset);
  }
  fprintf(file, "\n");
  //printf("\n");
  for(i = 0; i < len; i++) {
    switch(Serializer->data_unit_array[i].dtype) {
    case 0 : case 3 : case 4 :
      fprintf(file, "%d ", Serializer->data_unit_array[i].data.INT_DATA);
      //fwrite(&(Serializer->data_unit_array[i].data.INT_DATA), sizeof(int), 1, file);
      //printf("%d ", Serializer->data_unit_array[i].data.INT_DATA);
      break;
    case 1 :
      fprintf(file, "%d ", Serializer->data_unit_array[i].data.BOOL_DATA);
      //fwrite(&(Serializer->data_unit_array[i].data.BOOL_DATA), sizeof(bool), 1, file);
      //printf("%d ", Serializer->data_unit_array[i].data.INT_DATA);
      break;
    case 2 :
      fprintf(file, "%s ", Serializer->data_unit_array[i].data.STRING_DATA);
      //fwrite(Serializer->data_unit_array[i].data.STRING_DATA,
      //sizeof(char), strlen(Serializer->data_unit_array[i].data.STRING_DATA), file);
      //printf("%d ", strlen(Serializer->data_unit_array[i].data.STRING_DATA));
      break;
    }
    //printf("\n");
  }
  fprintf(file, "\n");
}

const char * data_types[] = {
  "int32",
  "bool",
  "string",
  "array",
  "object",
  "unknown"
};

void parseString(char * json, int start, int end, char ** destination) {
  (*destination) = (char *)malloc(sizeof(char) * (end - start + 2));
  int i, j;
  for(i = start+1, j = 0; i < end; i++, j++) {
    (*destination)[j] = json[i];
  }
  (*destination)[j] = '\0';
}

int parseInt(char * json, int start, int end) {
  int ret = 0;
  int i;
  for(i = start; i <= end; i++) {
    ret *= 10;
    ret += json[i] - '0';
  }
  return ret;
}

bool parseBool(char * json, int start) {
  return json[start] == 't' || json[start] == 'T' ? 1 : 0;
}

int cmp( const void *a ,const void *b){
  return (*(data_unit *)a).attr_id > (*(data_unit *)b).attr_id ? 1 : -1;
}

bool JsonSerializer(char * json, json_parser * first, int json_len,
		    int * max_id, catalog_record ** CATALOG, FILE * file) {
  if(json == NULL || first == NULL) {
    return false;
  }

  head2 head2_data;
  int offset;
  (*max_id)++;
  head2_data.tuple_id = (*max_id);
  head2_data.attr_num = json_len / 2;
  offset = (2 + json_len + 1) * sizeof(int);
  head2_data.offset = offset;
  
  head2_data.data_unit_array = (data_unit *)malloc(sizeof(data_unit) * (int)(json_len / 2));
  data_unit * data_units = head2_data.data_unit_array;
  
  int i;
  json_parser * json_parser_positioner = first;
  for(i = 0; i < json_len /2 ; i++) {
    char * Key_name = NULL;
    const char * Key_Type = NULL;
    
    // deal with keys
    parseString(json, json_parser_positioner->start, json_parser_positioner->end, &Key_name);
    // printf("%s\n", Key_name);
    json_parser_positioner = json_parser_positioner->next;
    
    Key_Type = data_types[(int)(json_parser_positioner->dtype)];
    data_units[i].attr_id = catalog_update(CATALOG, Key_name, Key_Type);
    free(Key_name);
    Key_name = NULL;
    Key_Type = NULL;
    
    // deal with values
    data_units[i].dtype = json_parser_positioner->dtype;
    switch(json_parser_positioner->dtype) {
    case 0 :
      data_units[i].data.INT_DATA = parseInt(json, json_parser_positioner->start, json_parser_positioner->end);
      break;
    case 1 :
      data_units[i].data.BOOL_DATA = parseBool(json, json_parser_positioner->start);
      break;
    case 2 :
      parseString(json, json_parser_positioner->start, json_parser_positioner->end,
		  &data_units[i].data.STRING_DATA);
      break;
    case 3 :
      data_units[i].data.ARRAY_DATA = ArraySerializer(json, json_parser_positioner->start,
						      json_parser_positioner->end, max_id, CATALOG, file);
      break;
    case 4 :
      data_units[i].data.OBJECT_DATA = ObjectSerializer(json, json_parser_positioner->start,
							json_parser_positioner->end, max_id, CATALOG, file);
      break;
    default:
      printf("Error @ Serializer:Serialize Unknown Type!\n");
      break;
    }
    json_parser_positioner = json_parser_positioner->next;
  }
  
  qsort(data_units, json_len / 2, sizeof(data_unit), cmp);

  for(i = 0; i < json_len /2 ; i++) {
    switch(data_units[i].dtype) {
    case 0:
      offset += sizeof(data_units[i].data.INT_DATA);
      break;
    case 1:
      offset += sizeof(data_units[i].data.BOOL_DATA);
      break;
    case 2:
      offset += sizeof(char) * strlen(data_units[i].data.STRING_DATA);
      break;
    case 3:
      offset += sizeof(data_units[i].data.ARRAY_DATA);
      break;
    case 4:
      offset += sizeof(data_units[i].data.OBJECT_DATA);
      break;
    default:
      printf("Error @ Serializer:Serialize Unknown Type!\n");
      break;
    }
    data_units[i].offset = offset;
  }
  
  head2_data.data_unit_array = data_units;
  
  // formatWrite(&head2_data, file);

  write(&head2_data, file);
  
  for(i = 0; i < json_len /2 ; i++) {
    if(data_units[i].dtype == 2) {
      free(data_units[i].data.STRING_DATA);
    }
  }

  free(head2_data.data_unit_array);
}

char** parseStringArray(char * json, int start, int end, int * count, int begin[1000], int finish[1000]) {
  
  int positioner = start;
  (*count) = 0;
  
  for(;positioner <= end; positioner++) {
    if(json[positioner] == '"') {
      begin[*count] = positioner+1;
      while(json[++positioner] != '"')
	;
      finish[*count] = positioner-1;
      positioner++;
      (*count)++;
    }
  }

  char ** strings = (char **)malloc(sizeof(char *) * (*count));

  int i, j, k;
  for(i = 0; i < (*count); i++) {
    /*
    if(begin[i] > finish[i]) {
      strings[i] = NULL;
      continue;
    }
    */
    strings[i] = malloc(sizeof(char) * (finish[i] - begin[i] + 2));
    strings[i][finish[i] - begin[i] + 1] = '\0';
    for(j = begin[i], k = 0; j <= finish[i]; j++, k++) {
      strings[i][k] = json[j];
    }
  }
  
  return strings;
}

int ArraySerializer(char * json, int start, int end, int * max_id, catalog_record ** CATALOG, FILE * file) {
  // empty array
  if(start+1 == end) {
    return -1;
  }
  
  char ** strings;
  int string_num;
  int begin[1000], finish[1000];
  strings = parseStringArray(json, start, end, &string_num, begin, finish);
  head2 head2_data;
  int offset = 0;
  
  (*max_id)++;
  head2_data.tuple_id = (*max_id);
  head2_data.attr_num = string_num;
  offset = (2 + string_num * 2 + 1) * sizeof(int);
  head2_data.offset = offset;

  head2_data.data_unit_array = (data_unit *)malloc(sizeof(data_unit) * (string_num + 1));
  data_unit * data_units = head2_data.data_unit_array;

  int i;

  /*
  for(i = 0; i < string_num; i++) {
    printf("%s\n", strings[i]);
  }
  */
  
  for(i = 0; i < string_num; i++) {
    data_units[i].dtype = 2;
    data_units[i].attr_id = -1;
    data_units[i].data.STRING_DATA = strings[i];
    offset += strlen(strings[i]) * sizeof (char);
    data_units[i].offset = offset;
  }

  // formatWrite(&head2_data, file);
  write(&head2_data, file);

  free(strings);
  free(head2_data.data_unit_array);
  
  return *max_id;
}

int ObjectSerializer(char * json, int start, int end, int * max_id, catalog_record ** CATALOG, FILE * file) {
  // empty object
  if(start + 1 == end) {
    return -1;
  }
  char * nested_json;
  nested_json = (char *)malloc(sizeof(char) * (end - start + 1));
  int i, j;
  for(i = start, j = 0; i <= end; i++, j++) {
    nested_json[j] = json[i];
  }
  json_parser * nested_json_parser;
  int nested_json_len;
  nested_json_parser = ParseJson(nested_json, &nested_json_len);
  JsonSerializer(nested_json, nested_json_parser, nested_json_len, max_id,CATALOG, file);
  DeleteJson(nested_json_parser);
  nested_json_parser = NULL;
  return *max_id;
}

void write(head2 * Serializer, FILE * file) {
  /*
  static char IOBUFFER[PAGE_SIZE];

  // 8k buffer
  if (setvbuf(file, IOBUFFER, _IOFBF, PAGE_SIZE) != 0) {
    printf("failed to set up buffer for input file\n");
  } else {
    printf("buffer set up for input file\n"); 
  }
  */

  fwrite(&(Serializer->tuple_id), sizeof(int), 1, file);
  //printf("%d ", Serializer->tuple_id);
  fwrite(&(Serializer->attr_num), sizeof(int), 1, file);
  //printf("%d ", Serializer->attr_num);
  
  int i;
  int len = Serializer->attr_num;
  for(i = 0; i < len; i++) {
    fwrite(&(Serializer->data_unit_array[i].attr_id), sizeof(int), 1, file);
    //printf("%d ", Serializer->data_unit_array[i].attr_id);
  }
  //printf("\n");
  fwrite(&(Serializer->offset), sizeof(int), 1, file);
  //printf("%d ", Serializer->offset);
  for(i = 0; i < len; i++) {
    fwrite(&(Serializer->data_unit_array[i].offset), sizeof(int), 1, file);
    //printf("%d ", Serializer->data_unit_array[i].offset);
  }
  //printf("\n");
  for(i = 0; i < len; i++) {
    switch(Serializer->data_unit_array[i].dtype) {
    case 0 : case 3 : case 4 :
      fwrite(&(Serializer->data_unit_array[i].data.INT_DATA), sizeof(int), 1, file);
      //printf("%d ", Serializer->data_unit_array[i].data.INT_DATA);
      break;
    case 1 :
      fwrite(&(Serializer->data_unit_array[i].data.BOOL_DATA), sizeof(bool), 1, file);
      //printf("%d ", Serializer->data_unit_array[i].data.INT_DATA);
      break;
    case 2 :
      fwrite(Serializer->data_unit_array[i].data.STRING_DATA,
	     sizeof(char), strlen(Serializer->data_unit_array[i].data.STRING_DATA), file);
      //printf("%d ", strlen(Serializer->data_unit_array[i].data.STRING_DATA));
      break;
    }
    //printf("\n");
  }
}
